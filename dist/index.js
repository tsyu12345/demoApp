/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ (() => {

eval("\n//円オブジェクト\nvar Elps = /** @class */ (function () {\n    function Elps(x, y, elp_dia) {\n        this.dia = elp_dia;\n        this.x = x;\n        this.y = y;\n    }\n    Elps.prototype.draw = function (context) {\n        context.beginPath();\n        context.arc(this.x, this.y, this.dia, 0 * Math.PI / 180, 360 * Math.PI / 180, false);\n        context.strokeStyle = 'rgba(255, 0, 0, 1)';\n        context.lineWidth = 3;\n        context.closePath();\n        context.stroke();\n    };\n    Elps.prototype.move = function (x, y) {\n        this.x = x;\n        this.y = y;\n    };\n    Elps.prototype.delete = function () {\n        //this.context.save()\n        context.clearRect(this.x - this.dia / 2 - 12, this.y - this.dia / 2 - 12, this.dia + 25, this.dia + 25);\n    };\n    return Elps;\n}());\n//線のオブジェクト\nvar DragLines = /** @class */ (function () {\n    function DragLines(context) {\n        this.context = context;\n        this.isDrag = false;\n    }\n    DragLines.prototype.draw = function (sx, sy, ex, ey) {\n        this.context.save();\n        this.context.lineCap = 'round';\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"blue\";\n        this.context.beginPath();\n        this.context.moveTo(sx, sy);\n        this.context.lineTo(ex, ey);\n        this.context.closePath();\n        this.context.stroke();\n        this.context.restore();\n    };\n    return DragLines;\n}());\n//grobal propatyes\nvar dia = 20;\nvar start_elps = new Elps(160, 190, dia);\nvar end_elps = new Elps(300, 190, dia);\nvar canvas = document.getElementById('draw_area');\nvar context = canvas.getContext('2d');\nvar drag_line = new DragLines(context);\nvar draw_text = document.getElementById('draw_text');\nvar side_text = document.getElementById('side_text');\nvar side_img = document.getElementById('SideImg');\nvar a_point = [[160, 190, 300, 190], [210, 180, 210, 300], [250, 200, 230, 330]];\nvar i_point = [[156, 179, 224, 265], [261, 189, 297, 283]];\nvar u_point = [[199, 137, 278, 150], [166, 201, 202, 288]];\nvar e_point = [[189, 142, 269, 147], [169, 195, 319, 290]];\nvar o_point = [[162, 176, 256, 171], [207, 132, 247, 252], [281, 150, 320, 191]];\nvar complete = [false, false, false, false, false,]; //文字の終了状態を示す[あ、い、う、え、お]\nvar count = 0;\nvar clear = false;\n//other functions\nfunction dist(x1, y1, x2, y2) {\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n}\nfunction draw_line() {\n    canvas.addEventListener('mouseout', function (e) {\n        drag_line.isDrag = false;\n    });\n    canvas.addEventListener('mouseup', function (e) {\n        //console.log('mouse released')\n        drag_line.isDrag = false;\n    });\n    canvas.addEventListener('mousedown', function (e) {\n        drag_line.isDrag = true;\n    });\n    canvas.addEventListener('mousemove', function (e) {\n        var downX = e.offsetX;\n        var downY = e.offsetY;\n        var prex = downX;\n        var prey = downY;\n        //drag_line.isDrag = true;\n        if (drag_line.isDrag === true) {\n            drag_line.draw(prex, prey, downX, downY);\n            prex = downX;\n            prey = downY;\n        }\n        else {\n            return;\n        }\n    });\n}\nfunction next_elps(sx, sy, ex, ey) {\n    start_elps.delete();\n    end_elps.delete();\n    start_elps.move(sx, sy);\n    end_elps.move(ex, ey);\n    //start_elps.draw(context);s\n    //end_elps.draw(context);\n}\nfunction text_change(text, subtext, img) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    //console.log('canvasClear')\n    draw_text.textContent = text;\n    side_text.textContent = subtext;\n    side_img.setAttribute('src', img);\n}\nfunction inittialize_text(change_data, point_data) {\n    count = 0;\n    text_change(change_data[0], change_data[1], change_data[2]);\n    clear = false;\n    start_elps = new Elps(point_data[0], point_data[1], dia);\n    end_elps = new Elps(point_data[2], point_data[3], dia);\n    start_elps.draw(context);\n    end_elps.draw(context);\n}\nfunction itimozi_end(mx, my, index) {\n    if (dist(mx, my, end_elps.x, end_elps.y) < dia / 2) {\n        if (drag_line.isDrag === true) {\n            complete.splice(index, 1, true);\n            clear = true;\n            count++;\n        }\n    }\n}\nfunction ittkaku_play(mx, my, point_data) {\n    if (dist(mx, my, end_elps.x, end_elps.y) < dia / 2) {\n        if (drag_line.isDrag === true) {\n            next_elps(point_data[0], point_data[1], point_data[2], point_data[3]);\n            start_elps.draw(context);\n            end_elps.draw(context);\n            count++;\n        }\n    }\n}\n//main function\nfunction main() {\n    draw_line();\n    start_elps.draw(context);\n    end_elps.draw(context);\n    canvas.addEventListener('mousemove', function (e) {\n        draw_line();\n        if (complete[0] === false) {\n            if (count === 0) {\n                if (dist(e.offsetX, e.offsetY, end_elps.x, end_elps.y) < dia / 2) {\n                    if (drag_line.isDrag === true) {\n                        count++;\n                    }\n                }\n            }\n            else if (count === 1) {\n                ittkaku_play(e.offsetX, e.offsetY, a_point[count]);\n            }\n            else if (count === 2) {\n                ittkaku_play(e.offsetX, e.offsetY, a_point[count]);\n            }\n            else if (count === 3) {\n                itimozi_end(e.offsetX, e.offsetY, 0);\n            }\n        }\n        else if (complete[1] === false) {\n            if (clear === true) {\n                inittialize_text(['い', 'いちご', '../src/images/itigo.png'], i_point[0]);\n            }\n            if (count === 0) {\n                if (dist(e.offsetX, e.offsetY, end_elps.x, end_elps.y) < dia / 2) {\n                    if (drag_line.isDrag === true) {\n                        count++;\n                    }\n                }\n            }\n            else if (count === 1) {\n                ittkaku_play(e.offsetX, e.offsetY, i_point[count]);\n            }\n            else if (count === 2) {\n                itimozi_end(e.offsetX, e.offsetY, 1);\n            }\n        }\n        else if (complete[2] === false) {\n            if (clear === true) {\n                inittialize_text(['う', 'うどん', '../src/images/udon.png'], u_point[0]);\n            }\n            if (count === 0) {\n                if (dist(e.offsetX, e.offsetY, end_elps.x, end_elps.y) < dia / 2) {\n                    if (drag_line.isDrag === true) {\n                        count++;\n                    }\n                }\n            }\n            else if (count === 1) {\n                ittkaku_play(e.offsetX, e.offsetY, u_point[count]);\n            }\n            else if (count === 2) {\n                itimozi_end(e.offsetX, e.offsetY, 2);\n            }\n        }\n        else if (complete[3] === false) {\n            if (clear === true) {\n                inittialize_text(['え', 'えほん', '../src/images/ehon.png'], e_point[0]);\n            }\n            if (count === 0) {\n                if (dist(e.offsetX, e.offsetY, end_elps.x, end_elps.y) < dia / 2) {\n                    if (drag_line.isDrag === true) {\n                        count++;\n                    }\n                }\n            }\n            else if (count === 1) {\n                ittkaku_play(e.offsetX, e.offsetY, e_point[count]);\n            }\n            else if (count === 2) {\n                itimozi_end(e.offsetX, e.offsetY, 3);\n            }\n        }\n        else if (complete[4] === false) {\n            if (clear === true) {\n                inittialize_text(['お', 'おわん', '../src/images/owan.png'], o_point[0]);\n            }\n            if (count === 0) {\n                if (dist(e.offsetX, e.offsetY, end_elps.x, end_elps.y) < dia / 2) {\n                    if (drag_line.isDrag === true) {\n                        count++;\n                    }\n                }\n            }\n            else if (count === 1) {\n                ittkaku_play(e.offsetX, e.offsetY, o_point[count]);\n            }\n            else if (count === 2) {\n                ittkaku_play(e.offsetX, e.offsetY, o_point[count]);\n            }\n            else if (count === 3) {\n                itimozi_end(e.offsetX, e.offsetY, 4);\n            }\n        }\n        else if (complete[4] === true) {\n            text_change('終', 'おわり', '../src/images/owan.png');\n        }\n    });\n}\n/*\n        if(count === 0) {\n            console.log('i 1st');\n            next_elps(i_point[0][0], i_point[0][1], i_point[0][2], i_point[0][3])\n            start_elps.draw(context);\n            end_elps.draw(context);\n\n        } else if(count === 1) {\n            console.log('i 2nd');\n            next_elps(i_point[1][0], i_point[1][1], i_point[1][2], i_point[1][3]);\n            start_elps.draw(context);\n            end_elps.draw(context);\n        }\n        */\n//window.requestAnimationFrame(main)\nmain();\n\n\n//# sourceURL=webpack://tstutorial/./src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/main.ts"]();
/******/ 	
/******/ })()
;